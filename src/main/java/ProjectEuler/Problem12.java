package ProjectEuler;

public class Problem12 {

    /*
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
    */

    public static void main(String[] args) {

        System.out.println(findTriangleNumberToHasOverFiveHundredDivisors(500));

    }
    public static long findTriangleNumberToHasOverFiveHundredDivisors(int numberOfDivisors){
        long numberOfDivisorsFound;
        long valueOfTriangleWith = 0;
        int increment = 1;
        do{
            valueOfTriangleWith += increment;
            numberOfDivisorsFound = checkHowManyDivisors(valueOfTriangleWith);
            increment++;
        }while(numberOfDivisorsFound <= numberOfDivisors);
        return valueOfTriangleWith;
    }
    public static int checkHowManyDivisors(long number){
        if(number > 0){
            int numberOfDivisors = 0;
            int sqrt = (int) Math.sqrt(number);
            for (int divisor = 1; divisor <= Math.sqrt(number) ; divisor++) {
                if(number % divisor == 0){
                    numberOfDivisors += 2;
                }
            }
            if(Math.pow(sqrt,2) == number){
                numberOfDivisors--;
            }
            return numberOfDivisors;
        } else {
            return 0;
        }
    }
}
